% This is LLNCS.DOC the documentation file of
% the LaTeX2e class from Springer-Verlag
% for Lecture Notes in Computer Science, version 2.4
\documentclass{llncs}
\usepackage{llncsdoc}

%
\begin{document}

\thispagestyle{empty}
\begin{flushleft}
\LARGE\bfseries Instructions for dsfsfsf\\
Coding with \LaTeX\\[2cm]
\end{flushleft}
\rule{\textwidth}{1pt}
\vspace{2pt}
\begin{flushright}
\Huge
\begin{tabular}{@{}l}
\LaTeXe{} Class\\
for Lecture Notes\\
in Computer Science\\[6pt]
{\Large Version 2.4}
\end{tabular}
\end{flushright}
\rule{\textwidth}{1pt}
\vfill
\newpage
%
\section*{For further information please contact us:}
%
\begin{flushleft}
\begin{tabular}{l@{\quad}l@{\hspace{3mm}}l@{\qquad}l}
$\bullet$&\multicolumn{3}{@{}l}{\bfseries LNCS Editorial Office}\\[1mm]
&\multicolumn{3}{@{}l}{Springer-Verlag}\\
&\multicolumn{3}{@{}l}{Computer Science Editorial}\\
&\multicolumn{3}{@{}l}{Tiergartenstra�e 17}\\
&\multicolumn{3}{@{}l}{69121 Heidelberg}\\
&\multicolumn{3}{@{}l}{Germany}\\[0.5mm]
 & Tel:       & +49-6221-487-8706\\
 & Fax:       & +49-6221-487-8588\\
 & e-mail:    & \tt lncs@springer.com    & for editorial questions\\
 &            & \tt texhelp@springer.de & for \TeX{} problems\\[2mm]
\noalign{\rule{\textwidth}{1pt}}
\noalign{\vskip2mm}
%
%{\tt svserv@vax.ntp.springer.de}\hfil first try the \verb|help|
%command.
%
$\bullet$&\multicolumn{3}{@{}l}{\bfseries We are also reachable through the world wide web:}\\[1mm]
         &\multicolumn{2}{@{}l}{\texttt{http://www.springer.com}}&Springer Global Website\\
         &\multicolumn{2}{@{}l}{\texttt{http://www.springer.com/lncs}}&LNCS home page\\
         &\multicolumn{2}{@{}l}{\texttt{http://www.springerlink.com}}&data repository\\
         &\multicolumn{2}{@{}l}{\texttt{ftp://ftp.springer.de}}&FTP server
\end{tabular}
\end{flushleft}


%
\newpage
\tableofcontents
\newpage
%
\section{Motivaci\'on}
En este art\'iculo se pretende dar a conocer la computaci\'on voluntaria y
el framework de c\'odigo abierto llamado ``NodIO" \cite{nodio},
desarrollado por Juan Juli\'an Merelo Guerv\'os (profesor de la Universidad de
Granada) mediante el cual se pueden lanzar experimentos y ser ejecutados
por los usuarios desde un navegador web.


\section{Introducci\'on}
%
Diversos son los m\'etodos utilizados por los llamados cient\'ificos
de datos para el procesamiento de largos conjuntos de resultados obtenidos
a trav\'es de la realizaci\'on de experimentos o, en su defecto, la propia
realizaci\'on de los experimentos: uso de un único supercomputador para
todo el procesamiento; creaci\'on de un cl\'uster de m\'aquinas en un centro
de procesamiento (o cloud); o, como en el caso que nos ocupa, la computaci\'on voluntaria.

La computaci\'on voluntaria es un m\'etodo de c\'omputo mediante el cual se
permite a distintos usuarios colaborar en un proyecto cient\'ifico,
en muchas ocasiones, aprovechando el tiempo ocioso de sus m\'aquinas. Esta colaboraci\'on
se produce entre computadores independientes, interconectados a trav\'es de una o varias redes
para comunicar informaci\'on y coordinar sus tareas. Gracias a este
trabajo conjunto de los usuarios, se pueden construir redes con potencias
equivalentes a la de los supercomputadores.

Un ejemplo de ello es \cite{seti} o \cite{climate}, sistemas creados por
departamentos de universidades para la realizaci\'on de m\'ultiples estudios.

En estos sistemas se desean las siguientes caracter\'isticas:
\begin{itemize}
  \item Tolerancia a fallos: en caso que una de las m\'aquinas deje de hacer un trabajo, es
  conveniente que se ese c\'omputo sea realizado por otro usuario
  \item Seguridad: para evitar que un usuario nocivo (o varios) puedan causar alg\'un da\~no
  al resto
  \item Ejecución en múltiples máquinas (incluso máquinas de distinta naturaleza):
  si el experimento o la transformaci\'on de los datos no se realiza en un n\'umero suficiente
  de m\'aquinas, no se tendr\'a potencia de c\'alculo para obtener resultados fruct\'iferos
  \item Compatibilidad entre los dispositivos conectados: es necesario que
  las distintas m\'aquinas puedan entenderse entre ellas, de forma que el resultado
  de una pueda ser interpretado por otra
  \item Escalable: que el sistema sea escalable es un punto muy importante, ya que
  cuanto mayor sea la escalabilidad, mayor ser\'a la potencia
\end{itemize}

La potencia variar\'a del n\'umero de usuarios que decidan colaborar, as\'i
como de la propia potencia de sus m\'aquinas y la capacidad del nodo ``coordinador"
sistema para repartir el trabajo
y recoger los resultados.

Adem\'as, gracias a que son los usuarios quienes ``prestan" sus m\'aquinas, el sistema
es m\'as barato que la contrataci\'on de c\'omputo o la compra de material dedicado.

Por su contra, la dificultad para llegar a un n\'umero importante de gente y los posibles
problemas que pueden aparecer en cuanto a la fiabilidad o correcci\'on de los datos
(aunque se pueden establecer mecanismos como la computaci\'on redundante
para asegurar la correcci\'on o la firma de c\'odigo para prevenir modificaciones maliciosas
del software), hacen que el m\'etodo no sea ideal.

\section{NodIO}
\subsection{¿Qu\'e es NodIO?}
NodIO \cite{nodio} es un software desarrollado para ser desplegado en un
Plataforma como Servicio (Platform A a Service), que, a su vez, se basa en un
framework llamado NodEO, pensado para el desarrollo de algoritmos gen\'eticos,
desarrollado en NodeJS.

Gracias a esta implementaci\'on, se pueden lanzar experimentos y ejecutarlos a
trav\'es de un navegador (utilizando el lenguaje Javascript) por cada uno de los
usuarios que accedan al servidor.



\subsection{Funcionamiento}
\subsubsection{Arquitectura}
Este sistema cloud sigue un paradigma cliente - servidor:
\begin{itemize}
  \item Servidor: realiza la coordinación de los clientes. Permite acceder a
  la informaci\'on y el envío de la misma a trav\'es de una interfaz REST.
  \item Cliente: procede con el c\'omputo. Hace peticiones as\'incronas al servidor.
\end{itemize}


\subsubsection{Env\'io de mensajes y coordinaci\'on}
Como se ha mencionado anteriormente, el NodIO se basa en NodEO, que permite la
ejecuci\'on de algoritmos gen\'eticos escritos en Javascript. El sistema procede
de la siguiente forma:
\begin{enumerate}
  \item El servidor es iniciado. Se inicializa un conjunto aleatorio de chromosomas,
  que llamaremos ``poblaci\'on compartida"
  \item Cada cliente se conecta al servidor y se le envía la web y los scripts asociados
  \item Se asigna a cada cliente un UUID
  \item Cada cliente recibe un chromosoma aleatorio
  \item Se comienza con los c\'alculos
  y ejecuta N generaciones
  \item Actualizaci\'on de las gr\'aficas de la web
  \item Cada cliente envía el mejor individuo al servidor, que guarda en la poblaci\'on compartida
  \begin{enumerate}
    \item Si el chromosoma enviado no es el mejor global:
      \begin{enumerate}
        \item Se recibe un individuo de la poblaci\'on compartida
        \item Vuelta al quinto paso
      \end{enumerate}
    \item Si el chromosoma es el mejor global:
      \begin{enumerate}
        \item Incremento del n\'umero de secuencia en el servidor
        \item Reseteo de la población compartida
        \item Se inicia un nuevo experimento
        \item Reseteo del UUID
        \item Vuelta al cuarto paso
      \end{enumerate}
  \end{enumerate}
\end{enumerate}




\bibauthoryear

\end{document}
